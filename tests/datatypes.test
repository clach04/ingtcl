# 
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.                   
#                                                                       
# Copyright (c) 2012 Tomasz Konojacki
#

package require tcltest 2.0
package require IngTcl
namespace import ::tcltest::*

proc dbconnect {} {
    if {![info exists ::env(INGTCL_DBNAME)]} {
        error "Environmental variable INGTCL_DBNAME is not present"
    }

    if {[info exists ::env(INGTCL_DBUSER)] && [info exists ::env(INGTCL_PASSWORD)]} {
        set conn [IngTcl::connect $::env(INGTCL_DBNAME) $::env(INGTCL_DBUSER) $::env(INGTCL_PASSWORD)]
    } elseif {[info exists ::env(INGTCL_DBUSER)]} {
        set conn [IngTcl::connect $::env(INGTCL_DBNAME) $::env(INGTCL_DBUSER)]
    } else {
        set conn [IngTcl::connect $::env(INGTCL_DBNAME)]
    }

    return $conn
}

set session {}
set test_table {testdfaas}

set types_dict {
    SMALLINT                            64
    INTEGER                             1234
    VARCHAR(30)                         {f o x}
    CHAR(10)                            {lazy      }
    C(10)                               {Wall      }
    FLOAT                               1.3
    ANSIDATE                            1963-03-15
    {BYTE VARYING(30)}                  "\1\2\3"
    BYTE(4)                             "\1\2\3\4"
    TIMESTAMP                           {1963-03-15 04:55:22.000100}
    DECIMAL(2,1)                        1.4
    TIME                                12:45:11
    {TIME WITH TIME ZONE}               12:47:32-04:00
    {TIME WITH LOCAL TIME ZONE}         12:45:02
    {INTERVAL YEAR TO MONTH}            55-04
    {INTERVAL DAY TO SECOND}            {-18 12:02:23}
    MONEY                               10.21
    {TIMESTAMP WITH TIME ZONE}          {2005-01-12 12:47:32.244561-04:00}
    {TIMESTAMP WITH LOCAL TIME ZONE}    {2006-01-12 10:56:12.245562}
}

set session [dbconnect]

# Silently ignore error
catch {IngTcl::do $session "drop table $test_table"}
IngTcl::commit $session

set i 1
dict for {type value} $types_dict {
    set cursor {}
    set row {}

    # By default, we should skip testing of BOOLEAN (for compatibility with Ingres 9.3 and older)
    if {(![info exists ::env(INGTCL_TEST_BOOLEAN)] || ($::env(INGTCL_TEST_BOOLEAN) == 0))
       && ($type eq "BOOLEAN")} {
        continue
    }
    
    if {[IngTcl::is_vectorwise $session]} {
        test "datatypes-$i" "CREATE TABLE ($type)." {
            IngTcl::do $session "
                CREATE TABLE $test_table (
                    foobar $type    
                ) WITH STRUCTURE=HEAP
            "
        } 1
    } else {
        test "datatypes-$i" "CREATE TABLE ($type)." {
            IngTcl::do $session "
                CREATE TABLE $test_table (
                    foobar $type    
                )
            "
        } 1
    }
    incr i

    test "datatypes-$i" "Prepare INSERT ($type)." {
        set cursor [IngTcl::prepare $session "INSERT INTO $test_table VALUES (?)"]
        info exists cursor
    } 1
    incr i    

    test "datatypes-$i" "Execute INSERT ($type)." {
        IngTcl::execute $session $cursor $value
    } 1
    incr i

    test "datatypes-$i" "Close cursor (1) ($type)." {
        IngTcl::close_cursor $session $cursor
    } 1
    incr i

    test "datatypes-$i" "Delete cursor (1) ($type)." {
        IngTcl::delete_cursor $session $cursor
    } 1
    incr i

    test "datatypes-$i" "Prepare SELECT ($type)." {
        set cursor [IngTcl::prepare $session "SELECT * FROM $test_table"]
        info exists cursor
    } 1
    incr i

    test "datatypes-$i" "Execute SELECT ($type)." {
        IngTcl::execute $session $cursor
    } 1
    incr i

    test "datatypes-$i" "Fetch row ($type)." {
        set row [IngTcl::fetch_row $session $cursor]
        info exists row
    } 1
    incr i

    test "datatypes-$i" "Check returned row ($type)." {
        set val {}

        if {($type eq "BYTE(4)") || ($type eq "BYTE VARYING(30)")} {
            binary scan [lindex $row 0] "a*" val
        } else {
            set val [lindex $row 0]
        }

        expr {$val == $value}
    } 1
    incr i

    test "datatypes-$i" "Close cursor (2) ($type)." {
        IngTcl::close_cursor $session $cursor
    } 1
    incr i

    test "datatypes-$i" "Delete cursor (2) ($type)." {
        IngTcl::delete_cursor $session $cursor
    } 1
    incr i

    test "datatypes-$i" "DROP TABLE ($type)." {
        IngTcl::do $session "DROP TABLE $test_table"
    } 1
    incr i
}

test "datatypes-$i" {Disconnect.} {
    IngTcl::disconnect $session
} 1